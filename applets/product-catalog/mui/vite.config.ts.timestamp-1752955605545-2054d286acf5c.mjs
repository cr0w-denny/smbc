// vite.config.ts
import { defineConfig } from "file:///Users/developer/ws-cr0w/zzz/node_modules/vite/dist/node/index.js";
import react from "file:///Users/developer/ws-cr0w/zzz/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///Users/developer/ws-cr0w/zzz/node_modules/vite-plugin-dts/dist/index.mjs";
import { resolve } from "path";

// ../../../scripts/vite/suppress-warnings.ts
function suppressUseClientWarnings() {
  return {
    name: "suppress-use-client-warnings",
    config(config) {
      config.build = config.build || {};
      config.build.rollupOptions = config.build.rollupOptions || {};
      config.build.rollupOptions.onwarn = (warning, warn) => {
        if (warning.code === "MODULE_LEVEL_DIRECTIVE" && warning.message.includes('"use client"')) {
          return;
        }
        if (warning.code === "MODULE_LEVEL_DIRECTIVE" && warning.message.includes('"use server"')) {
          return;
        }
        warn(warning);
      };
    }
  };
}

// ../../../scripts/vite/externals.ts
var REACT_EXTERNALS = [
  "react",
  "react-dom",
  "react/jsx-runtime",
  "react/jsx-dev-runtime"
];
var MUI_EXTERNALS = [
  "@mui/material",
  "@mui/icons-material",
  "@emotion/react",
  "@emotion/styled"
];
var DATA_EXTERNALS = [
  "@tanstack/react-query",
  "@tanstack/react-query-devtools",
  "msw"
];
var API_EXTERNALS = ["openapi-fetch", "openapi-react-query"];
var UTILITY_EXTERNALS = [
  "swagger-ui-react",
  "@faker-js/faker",
  "openapi-sampler"
];
var ALL_EXTERNALS = [
  ...REACT_EXTERNALS,
  ...MUI_EXTERNALS,
  ...DATA_EXTERNALS,
  ...API_EXTERNALS,
  ...UTILITY_EXTERNALS
];
function getExternals(packageType = "full", additionalExternals = []) {
  let externals = [];
  switch (packageType) {
    case "core":
      externals = [...REACT_EXTERNALS];
      break;
    case "mui":
      externals = [...REACT_EXTERNALS, ...MUI_EXTERNALS];
      break;
    case "api":
      externals = [...REACT_EXTERNALS, ...DATA_EXTERNALS, ...API_EXTERNALS];
      break;
    case "full":
    default:
      externals = [...ALL_EXTERNALS];
      break;
  }
  return [...externals, ...additionalExternals];
}
function getSMBCExternals(packageType = "full", smbcExternals = []) {
  return getExternals(packageType, smbcExternals);
}

// vite.config.ts
var __vite_injected_original_dirname = "/Users/developer/ws-cr0w/zzz/applets/product-catalog/mui";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    dts({
      insertTypesEntry: true,
      tsconfigPath: "./tsconfig.json",
      exclude: ["**/*.stories.*", "**/*.test.*"]
    }),
    suppressUseClientWarnings()
  ],
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
      formats: ["es"],
      fileName: () => "index.es.js"
    },
    rollupOptions: {
      external: getSMBCExternals("full", [
        "@smbc/applet-core",
        "@smbc/ui-core",
        "@smbc/mui-components",
        "@smbc/mui-applet-core",
        "@smbc/applet-query-client",
        "@smbc/product-catalog-api",
        "@smbc/product-catalog-client"
      ])
    }
  },
  optimizeDeps: {
    // Pre-bundle these dependencies to avoid issues
    include: ["@mui/material"]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
